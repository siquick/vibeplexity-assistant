---
description: AI integration guidelines for Orin's intelligent orchestration
globs: ["**/ai/**", "**/llm/**", "**/tools/**", "**/prompts/**"]
alwaysApply: false
---

# Orin - AI Integration Standards

## Model Selection
- Use **Gemini 2.5 Flash** for primary LLM operations
- Use **OpenAI 4.1-mini** as fallback or for specific use cases
- Always use the **AI SDK** for LLM integrations

## Tool Development
- Follow the AI SDK `tool()` pattern for all new tools
- Use **Zod schemas** for input validation
- Provide clear descriptions for LLM understanding

## Example Tool Structure:
```typescript
import { tool } from 'ai';
import { z } from 'zod';

export const myTool = tool({
  description: "Clear description of what this tool does",
  inputSchema: z.object({
    query: z.string().describe("What the user wants to accomplish"),
    options: z.object({
      detailed: z.boolean().optional().describe("Whether to provide detailed response")
    }).optional()
  }),
  execute: async ({ query, options }) => {
    try {
      // Implementation with proper error handling
      const result = await processQuery(query, options);
      return { success: true, data: result };
    } catch (error) {
      console.error('Tool execution failed:', error);
      return { success: false, error: error.message };
    }
  },
});
```

## Agentic Workflow
- Maintain the 3-step pattern: **Planning → Execution → Synthesis**
- Use structured prompts with clear reasoning sections
- Always validate tool outputs before synthesis

Reference implementation: @src/tools/tool-definitions.ts
Example prompts: @src/prompts/planner.js
